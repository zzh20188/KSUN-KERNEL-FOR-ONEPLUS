name: 编译一加内核(mksu)
run-name: ${{ github.actor }} 正在编译一加内核🚀
on:
  workflow_call:
    inputs:
      m:
        required: false
        type: string
      gki:
        required: false
        type: string
      model:
        required: false
        type: string     
jobs:
  test_job:
    runs-on: ubuntu-latest
   
    steps:
      
      - name: 他山之石可以攻玉
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192  
          temp-reserve-mb: 2048  
          swap-size-mb: 8192     
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 初始化
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          sudo apt update && sudo apt upgrade -y
          sudo apt install curl git python3 python3-pip -y
          pip3 install requests_toolbelt requests

      - name: 拉取仓库
        run: |
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b ${{ inputs.gki }} --depth=1 susfs   
          git clone https://github.com/WildPlusKernel/kernel_patches.git

      - name: 下载内核源代码
        run: |
          mkdir work && cd work
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.model }} -m ${{ inputs.m }} --depth=1
          repo sync -j$(nproc --all)
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          sed -i 's/check_defconfig//' kernel_platform/common/build.config.gki
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "kernel_platform/common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "kernel_platform/common/arch/arm64/configs/gki_defconfig"
          sed -i 's/ -dirty$//' kernel_platform/common/scripts/setlocalversion
          sed -i 's/ -dirty$//' kernel_platform/msm-kernel/scripts/setlocalversion

          cd kernel_platform

          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: 添加KSUN与Susfs
        run: |
          echo "1.进入common"
          cd work/kernel_platform/common/
          echo "2.安装MKSU"
          curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash -s main
          cd ../../
          cp ../susfs/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./kernel_platform/common/KernelSU/
          cp ../susfs/kernel_patches/50_add_susfs_in_${{ inputs.gki }}.patch ./kernel_platform/common/
          cp ../susfs/kernel_patches/fs/* ./kernel_platform/common/fs/
          cp ../susfs/kernel_patches/include/linux/* ./kernel_platform/common/include/linux/
          cd ./kernel_platform/common/
          cd ./KernelSU
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
          

      - name: 额外补丁
        run: |
            ls kernel_patches/
            ls
            cp kernel_patches/mksu/mksu_susfs.patch work/kernel_platform/common/KernelSU/
            cp kernel_patches/mksu/fix.patch work/kernel_platform/common/KernelSU/
            cd work/kernel_platform/common/KernelSU/
            patch -p1 < mksu_susfs.patch
            patch -p1 < fix.patch
            cd ..
            patch -p1 < 50_add_susfs_in_${{ inputs.gki }}.patch || true

      - name: 开始编译
        run: |
          cd work
          ./kernel_platform/oplus/build/oplus_build_kernel.sh pineapple gki
          find . -name "Image" -o -name "boot.img"
          ls
          ls out/dist/
          ls kernel_platform/out/msm-kernel-pineapple-gki/dist/
          
      - name: 整合资源
        if: always()    
        run: |
          #正常Image
          mkdir -p src
          cd ak3
          mv $GITHUB_WORKSPACE/work/out/dist/Image .
          zip -r "../src/${{ inputs.m }}.zip" ./*
          rm Image
          #gzip压缩版
          mv $GITHUB_WORKSPACE/work/out/dist/Image.gz .
          zip -r "../src/${{ inputs.m }}-gz.zip"  ./*
          rm Image.gz
          #lz4压缩版
          mv $GITHUB_WORKSPACE/work/out/dist/Image.lz4 .
          zip -r "../src/${{ inputs.m }}-lz4.zip"  ./*
          #正常boot
          # cd ..
          # mv work/out/dist/boot.img src/
          # mv work/out/dist/boot-gz.img src/
          # mv work/out/dist/boot-lz4.img src/

  
      - name: 上传Anykernel刷入包与boot.img
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.m }}-Image_boot
          path: |
            src/*.zip
            # src/*.img

